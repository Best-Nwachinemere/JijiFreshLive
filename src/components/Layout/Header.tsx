import React, { useState, useEffect } from 'react';
import { Link, useLocation } from 'react-router-dom';
import { Moon, Sun, Menu, X, User, LogIn, LogOut, ShoppingBag, LayoutDashboard, ShoppingCart } from 'lucide-react';
import { useApp } from '../../contexts/AppContext';
import ShoppingCartComponent from '../ShoppingCart';

const Header: React.FC = () => {
  const { state, dispatch, slogans } = useApp();
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [isCartOpen, setIsCartOpen] = useState(false);
  const [sloganIndex, setSloganIndex] = useState(0);
  const [cartItemCount, setCartItemCount] = useState(0);
  const location = useLocation();

  useEffect(() => {
    const interval = setInterval(() => {
      setSloganIndex((prev) => {
        const nextIndex = (prev + 1) % slogans.length;
        dispatch({ type: 'SET_SLOGAN', payload: slogans[nextIndex] });
        return nextIndex;
      });
    }, 4000);

    return () => clearInterval(interval);
  }, [slogans, dispatch]);

  useEffect(() => {
    // Update cart item count
    const updateCartCount = () => {
      const savedCart = localStorage.getItem('jijiFreshCart');
      if (savedCart) {
        const cart = JSON.parse(savedCart);
        const count = cart.reduce((sum: number, item: any) => sum + item.quantity, 0);
        setCartItemCount(count);
      } else {
        setCartItemCount(0);
      }
    };

    updateCartCount();
    
    // Listen for storage changes
    window.addEventListener('storage', updateCartCount);
    
    // Listen for custom cart update events
    window.addEventListener('cartUpdated', updateCartCount);
    
    return () => {
      window.removeEventListener('storage', updateCartCount);
      window.removeEventListener('cartUpdated', updateCartCount);
    };
  }, []);

  const toggleDarkMode = () => {
    dispatch({ type: 'TOGGLE_DARK_MODE' });
    document.documentElement.classList.toggle('dark');
  };

  const handleLogin = () => {
    // Mock login - in real app, this would be proper authentication
    const mockUser = {
      id: '2',
      name: 'Chinedu Okoro',
      email: 'chinedu@example.com',
      role: 'seller' as const,
      location: 'Ikeja, Lagos',
      isVerified: true,
      joinedAt: new Date()
    };
    dispatch({ type: 'SET_USER', payload: mockUser });
  };

  const handleLogout = () => {
    dispatch({ type: 'SET_USER', payload: null });
  };

  return (
    <>
      <header className={`sticky top-0 z-50 transition-all duration-300 ${
        state.isDarkMode 
          ? 'bg-gray-900/95 backdrop-blur-md border-gray-700' 
          : 'bg-white/95 backdrop-blur-md border-gray-200'
      } border-b`}>
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            {/* Logo and Slogan */}
            <Link to="/" className="flex items-center space-x-3 group">
              <div className="w-8 h-8 group-hover:scale-110 transition-transform duration-200">
                <svg viewBox="0 0 1024 1024" className="w-full h-full fill-green-600">
                  <path d="M836.694397,293.615295 C855.638184,281.765808 876.177551,277.386719 897.894043,277.483612 C901.530579,277.499817 903.108521,279.046692 902.362427,282.797974 C897.866516,305.400787 890.623535,326.866089 876.297180,345.351349 C861.095886,364.965485 841.720032,377.845276 816.802856,381.346863 C811.935608,382.030884 810.256287,383.842834 810.190063,388.986572 C809.983887,404.986908 811.176575,420.934387 811.545410,436.907104 C811.667542,442.193359 812.034851,447.672943 812.946167,454.297577 C818.086731,449.279785 821.665222,444.475189 826.890808,441.402100 C839.927917,433.735077 853.432617,432.832458 866.971680,439.077789 C880.885437,445.495880 886.191528,458.036102 887.202881,472.348816 C888.411743,489.457245 888.064392,506.619568 887.590332,523.781433 C887.375000,531.574402 887.391541,539.410767 887.364197,547.227661 C887.345642,552.538025 885.837280,554.228821 880.718323,554.339478 C875.222229,554.458313 869.721313,554.372864 864.222717,554.342041 C860.250977,554.319763 858.241333,552.306580 857.625061,548.346619 C855.947388,537.566345 856.920776,526.731140 856.741699,515.924133 C856.562195,505.095947 856.680847,494.262756 856.680664,483.431763 C856.680481,475.467560 853.615967,468.821411 846.518494,465.254272 C838.955872,461.453339 831.246765,462.675201 824.425293,467.804077 C817.001709,473.385620 813.400269,481.028839 813.342468,490.225250 C813.228333,508.387329 813.303772,526.550537 813.272278,544.713257 C813.258850,552.458496 811.305481,554.345520 803.479004,554.362793 C798.813416,554.373047 794.146606,554.474182 789.482666,554.395752 C784.578613,554.313293 782.550293,552.214478 782.595398,547.303040 C783.014587,501.655762 783.417236,456.008301 783.933350,410.362122 C784.021545,402.564667 785.428955,394.793121 783.709290,386.979462 C782.917786,383.383301 781.393311,381.608978 777.451782,381.322571 C737.513672,378.420898 708.658691,359.607574 693.063171,322.018463 C688.781799,311.699341 685.296814,301.135254 683.265747,290.111145 C682.392883,285.373688 683.293518,283.739563 688.399414,283.651764 C694.885498,283.540161 701.523499,283.205048 707.843933,284.353577 C722.235474,286.968719 736.392517,290.451111 749.214905,298.180023 C768.660950,309.901520 780.286316,327.314880 787.240417,348.391113 C789.537476,355.353088 791.050598,362.502045 792.964233,369.911041 C794.810669,337.242310 807.490173,310.837952 836.694397,293.615295 z"/>
                  <path d="M589.107178,523.867310 C594.718140,529.537292 601.380920,531.463745 608.811890,531.713257 C620.428345,532.103333 631.641357,530.575562 642.504089,526.194824 C648.914307,523.609619 653.361572,526.584717 654.103882,533.419495 C654.520447,537.254456 653.940002,541.057068 653.425476,544.856079 C653.083252,547.382935 651.227112,548.500244 649.256775,549.418884 C639.675781,553.885803 629.672241,556.997437 619.057739,557.290527 C608.931152,557.570190 598.832214,557.773682 588.869629,554.701355 C570.653198,549.083801 558.896851,537.075134 553.429382,519.183655 C547.085693,498.424744 548.146240,478.091736 559.790894,459.167297 C568.735168,444.631409 582.853027,438.553589 599.070190,436.778748 C606.474121,435.968475 614.085632,435.543518 621.430908,437.162354 C642.829529,441.878418 654.824341,455.847717 659.260559,476.822327 C660.639954,483.343719 661.251404,490.001892 660.767212,496.652618 C660.195984,504.497986 658.302490,506.101135 650.481140,506.116302 C636.492493,506.143494 622.503723,506.112152 608.515015,506.103333 C601.354187,506.098816 594.191895,506.172699 587.033081,506.049164 C583.292847,505.984619 581.863037,507.154663 582.897034,511.119507 C584.094727,515.712036 585.807739,519.951660 589.107178,523.867310 M619.474060,462.860321 C604.491943,455.767212 588.444519,462.470673 583.198669,478.013611 C581.646301,482.613220 582.300842,483.630798 587.298340,483.651245 C599.925903,483.702911 612.554688,483.562958 625.181274,483.678467 C628.732117,483.710938 630.146606,482.321991 629.541870,478.915344 C628.403198,472.500519 626.022766,466.802582 619.474060,462.860321 z"/>
                  <path d="M433.000000,427.944519 C423.171600,427.936188 413.841705,428.020081 404.515533,427.871429 C400.682770,427.810364 399.178589,429.207153 399.283325,433.152466 C399.504272,441.475555 399.654907,449.824219 399.232910,458.131866 C398.976135,463.187683 400.540283,464.806854 405.612305,464.708313 C419.932617,464.430084 434.262146,464.591583 448.587860,464.639343 C455.315369,464.661774 456.733856,465.999908 457.139282,472.705963 C457.319977,475.694427 457.227234,478.700745 457.222473,481.698914 C457.207764,490.994598 455.155853,493.144958 445.718567,493.211914 C432.392883,493.306427 419.061523,493.435699 405.741943,493.135345 C400.669891,493.020966 399.146179,494.661682 399.241638,499.703979 C399.534851,515.190369 399.363770,530.685852 399.337402,546.177795 C399.326172,552.779968 397.775421,554.298828 391.018433,554.357666 C385.688385,554.404053 380.354614,554.462952 375.027771,554.320190 C369.646423,554.175903 367.909882,552.486511 367.647552,547.097900 C366.326691,519.965698 367.223999,492.812927 367.004272,465.670074 C366.859985,447.847473 366.983124,430.022614 367.008667,412.198761 C367.011536,410.202362 367.070404,408.197845 367.255798,406.211334 C367.826904,400.092804 369.319153,398.682526 375.392090,398.661011 C386.885986,398.620270 398.380127,398.648651 409.874146,398.651031 C425.532654,398.654327 441.191254,398.637054 456.849670,398.675415 C463.875946,398.692657 465.309662,400.178131 465.343597,407.211670 C465.364471,411.542450 465.237701,415.877533 465.392517,420.203003 C465.556580,424.786804 463.269196,426.822601 458.948822,427.404724 C450.477478,428.546112 441.980438,427.699921 433.000000,427.944519 z"/>
                  <path d="M677.263794,487.539978 C666.319458,464.991211 675.979553,443.632904 699.772461,437.348145 C717.189636,432.747437 734.343811,434.212311 751.225464,440.163177 C754.128662,441.186615 756.017334,442.983612 756.650574,446.092316 C757.661987,451.057709 757.565491,456.056122 756.755554,460.980743 C756.022949,465.435883 752.758789,466.416931 748.827515,465.385956 C743.200012,463.910034 737.672485,462.031586 732.013733,460.701782 C724.668152,458.975616 717.236023,458.073608 710.019531,461.388489 C702.742310,464.731323 702.007568,472.032196 708.465576,476.726593 C711.045959,478.602295 713.943420,479.827423 717.020264,480.700012 C725.498840,483.104675 733.981140,485.501434 742.417786,488.047760 C771.963928,496.965363 770.338379,529.813477 755.171265,544.629272 C747.316895,552.301697 737.717102,555.758118 727.423889,556.911926 C711.208618,558.729553 695.225708,557.129944 679.961182,550.623230 C674.675903,548.370300 672.076782,544.873352 672.614502,539.040833 C672.858154,536.398010 672.625244,533.713989 672.670776,531.049683 C672.791382,523.991089 676.575378,521.279907 683.137573,524.151550 C688.806030,526.632202 694.543091,528.829285 700.508850,530.341736 C708.273438,532.310303 716.133118,533.727600 724.156677,531.708008 C724.961670,531.505371 725.797424,531.373474 726.560791,531.065063 C730.623352,529.423523 734.316040,526.909180 734.398926,522.283875 C734.475647,517.995728 731.311646,515.053345 727.495850,513.265747 C719.780090,509.651154 711.502563,507.664551 703.405029,505.153259 C693.068542,501.947510 683.357056,497.752136 677.263794,487.539978 z"/>
                  <path d="M180.356262,449.000122 C180.351166,468.492615 180.474365,487.486237 180.306015,506.477295 C180.110977,528.480652 168.061234,547.387756 149.950226,554.023315 C137.730682,558.500305 125.127449,558.707092 112.583534,555.627136 C99.062866,552.307434 101.950806,552.453369 101.655487,541.367981 C101.566788,538.038452 101.743324,534.701538 101.638031,531.373047 C101.499931,527.007629 103.710159,525.495056 107.821953,525.579346 C110.934761,525.643188 113.639145,526.931030 116.478294,527.823486 C127.609505,531.322449 139.452362,526.922058 143.822815,517.281738 C146.184647,512.072083 146.615875,506.347412 146.626404,500.683350 C146.683716,469.862274 146.657425,439.041046 146.662720,408.219849 C146.664200,399.535400 147.586945,398.642761 156.522766,398.649323 C162.187195,398.653473 167.852402,398.605255 173.515808,398.684937 C178.988617,398.761902 180.313904,400.048859 180.335800,405.517303 C180.393158,419.844696 180.355469,434.172455 180.356262,449.000122 z"/>
                  <path d="M258.663788,497.999939 C258.665833,481.167267 258.636414,464.834534 258.683197,448.502014 C258.707306,440.086884 260.196381,438.667023 268.606781,438.658783 C273.106567,438.654388 277.609070,438.577454 282.105408,438.705994 C287.116821,438.849213 289.291046,440.819855 289.297729,445.644104 C289.349945,483.308929 289.684448,520.979065 289.158661,558.636841 C288.848267,580.866577 273.581482,596.615723 251.451263,599.394592 C236.825745,601.231079 233.923111,598.424133 234.802063,583.652649 C235.115158,578.390747 236.351547,574.951172 242.620575,573.631409 C254.178909,571.198120 258.472504,564.184814 258.610352,549.497681 C258.769928,532.499756 258.657959,515.499268 258.663788,497.999939 z"/>
                  <path d="M474.843567,501.999573 C475.202301,483.024048 474.470703,464.536407 475.524536,446.066895 C475.817780,440.927979 477.652985,438.809875 482.762726,438.685638 C487.256805,438.576355 491.758972,438.561798 496.251831,438.697052 C501.899841,438.867065 503.953278,441.015472 504.422607,446.523834 C504.700256,449.782013 504.372803,453.124146 505.655975,456.960754 C510.396667,449.009216 515.830688,442.469238 524.039368,438.668793 C529.667908,436.062897 535.488037,435.281982 541.538025,435.730560 C544.871155,435.977722 546.975769,437.587341 547.469788,441.265686 C548.295044,447.410980 548.325806,453.569244 548.046143,459.714264 C547.771606,465.748840 545.687012,467.394318 539.803528,466.611847 C518.186890,463.736969 507.184631,478.305298 506.449585,495.861664 C505.816101,510.993011 506.233032,526.168213 506.181519,541.324036 C506.141907,552.980774 504.795593,554.355713 493.414642,554.371765 C490.083679,554.376526 486.752625,554.381042 483.421753,554.361938 C478.774170,554.335205 475.926971,552.304077 475.296631,547.429688 C474.265991,539.459351 474.880127,531.465576 474.768097,523.484314 C474.669922,516.491089 474.809326,509.494598 474.843567,501.999573 z"/>
                  <path d="M343.206665,468.000000 C343.240204,493.146149 343.288605,517.792297 343.283905,542.438416 C343.283478,544.754211 343.126678,547.101379 342.726410,549.378357 C342.164795,552.572876 340.110382,554.328003 336.805084,554.342957 C330.810547,554.370056 324.812225,554.450745 318.822266,554.276428 C315.278046,554.173340 312.835724,552.521667 312.600677,548.544128 C312.404907,545.230652 311.788147,541.928223 311.778748,538.619690 C311.697327,509.977081 311.710083,481.334198 311.700623,452.691376 C311.700256,451.526428 311.685333,450.354370 311.799438,449.197693 C312.740906,439.652252 313.853058,438.659607 323.513641,438.656219 C327.343781,438.654846 331.175079,438.604462 335.003815,438.679138 C340.559845,438.787476 342.712952,440.512573 342.983032,446.026123 C343.332977,453.170593 343.156647,460.340851 343.206665,468.000000 z"/>
                  <path d="M226.527130,554.287109 C221.079727,554.323975 216.083160,554.379456 211.087967,554.320129 C206.982574,554.271362 204.783783,552.499939 204.516251,548.002869 C203.525940,531.355774 204.708984,514.724548 204.584442,498.086853 C204.462341,481.780121 204.473557,465.472473 204.390549,449.165405 C204.342560,439.737732 205.396042,438.662781 214.978592,438.653778 C218.975433,438.650024 222.972336,438.611694 226.969101,438.623810 C232.216080,438.639740 234.650452,440.770416 235.256149,445.889587 C235.372955,446.876892 235.329346,447.885406 235.329071,448.884125 C235.320175,479.860626 235.327011,510.837128 235.282867,541.813599 C235.270432,550.538330 233.983307,552.360046 226.527130,554.287109 z"/>
                  <path d="M206.046326,424.905762 C200.169449,416.519318 200.127029,406.773224 205.699112,400.772583 C211.991837,393.995911 221.683716,392.604523 229.817917,397.310150 C236.142471,400.968872 239.463425,409.275726 237.595703,416.765076 C235.607269,424.738556 229.436661,429.934265 221.757217,430.387115 C215.849091,430.735504 210.480850,429.792908 206.046326,424.905762 z"/>
                  <path d="M313.921753,399.918304 C326.242188,390.425446 341.248383,394.824402 344.534393,408.546722 C346.421204,416.426056 343.097198,424.547119 336.474152,428.239410 C329.353638,432.209045 319.695190,431.124420 314.264954,425.745300 C308.242523,419.779572 306.942108,411.083893 311.057404,403.814667 C311.786926,402.526093 312.794403,401.394836 313.921753,399.918304 z"/>
                  <path d="M264.169312,428.153107 C254.774841,420.991241 253.052582,410.744232 259.407867,401.656433 C264.509766,394.360931 275.617249,392.412720 283.537506,397.424103 C291.189972,402.266144 294.118225,411.979126 290.396698,420.176056 C286.585480,428.570404 276.760437,432.729034 267.703583,429.745117 C266.603607,429.382751 265.571930,428.813049 264.169312,428.153107 z"/>
                </svg>
              </div>
              <div>
                <h1 className={`text-xl font-bold ${
                  state.isDarkMode ? 'text-white' : 'text-gray-900'
                }`}>
                  JijiFresh
                </h1>
                <p className={`text-xs transition-all duration-500 ${
                  state.isDarkMode ? 'text-green-400' : 'text-green-600'
                }`}>
                  {state.currentSlogan}
                </p>
              </div>
            </Link>

            {/* Desktop Navigation */}
            <nav className="hidden md:flex items-center space-x-6">
              <Link
                to="/"
                className={`transition-colors duration-200 ${
                  location.pathname === '/' 
                    ? (state.isDarkMode ? 'text-green-400' : 'text-green-600')
                    : (state.isDarkMode ? 'text-gray-300 hover:text-white' : 'text-gray-600 hover:text-gray-900')
                }`}
              >
                Home
              </Link>
              <Link
                to="/listings"
                className={`transition-colors duration-200 ${
                  location.pathname === '/listings' 
                    ? (state.isDarkMode ? 'text-green-400' : 'text-green-600')
                    : (state.isDarkMode ? 'text-gray-300 hover:text-white' : 'text-gray-600 hover:text-gray-900')
                }`}
              >
                Browse Listings
              </Link>
              
              {state.user && state.user.role === 'seller' && (
                <Link
                  to="/seller-dashboard"
                  className={`flex items-center space-x-1 transition-colors duration-200 ${
                    location.pathname === '/seller-dashboard' 
                      ? (state.isDarkMode ? 'text-green-400' : 'text-green-600')
                      : (state.isDarkMode ? 'text-gray-300 hover:text-white' : 'text-gray-600 hover:text-gray-900')
                  }`}
                >
                  <ShoppingBag className="w-4 h-4" />
                  <span>Dashboard</span>
                </Link>
              )}

              {state.user && state.user.role === 'admin' && (
                <Link
                  to="/admin"
                  className={`flex items-center space-x-1 transition-colors duration-200 ${
                    location.pathname === '/admin' 
                      ? (state.isDarkMode ? 'text-green-400' : 'text-green-600')
                      : (state.isDarkMode ? 'text-gray-300 hover:text-white' : 'text-gray-600 hover:text-gray-900')
                  }`}
                >
                  <LayoutDashboard className="w-4 h-4" />
                  <span>Admin</span>
                </Link>
              )}
            </nav>

            {/* Actions */}
            <div className="flex items-center space-x-4">
              {/* Shopping Cart */}
              <button
                onClick={() => setIsCartOpen(true)}
                className={`relative p-2 rounded-lg transition-colors ${
                  state.isDarkMode 
                    ? 'text-gray-300 hover:bg-gray-800 hover:text-white' 
                    : 'text-gray-600 hover:bg-gray-100 hover:text-gray-900'
                }`}
              >
                <ShoppingCart className="w-5 h-5" />
                {cartItemCount > 0 && (
                  <span className="absolute -top-1 -right-1 bg-green-600 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center font-bold">
                    {cartItemCount > 99 ? '99+' : cartItemCount}
                  </span>
                )}
              </button>

              <button
                onClick={toggleDarkMode}
                className={`p-2 rounded-lg transition-colors ${
                  state.isDarkMode 
                    ? 'text-yellow-400 hover:bg-gray-800' 
                    : 'text-gray-600 hover:bg-gray-100'
                }`}
              >
                {state.isDarkMode ? <Sun className="w-5 h-5" /> : <Moon className="w-5 h-5" />}
              </button>

              {state.user ? (
                <div className="flex items-center space-x-3">
                  <div className="flex items-center space-x-2">
                    <User className="w-5 h-5 text-green-600" />
                    <span className={`hidden sm:block ${state.isDarkMode ? 'text-white' : 'text-gray-900'}`}>
                      {state.user.name}
                    </span>
                  </div>
                  <button
                    onClick={handleLogout}
                    className="flex items-center space-x-1 px-3 py-2 text-sm text-red-600 hover:bg-red-50 dark:hover:bg-red-900/20 rounded-md transition-colors"
                  >
                    <LogOut className="w-4 h-4" />
                    <span className="hidden sm:block">Logout</span>
                  </button>
                </div>
              ) : (
                <button
                  onClick={handleLogin}
                  className="flex items-center space-x-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
                >
                  <LogIn className="w-4 h-4" />
                  <span>Login</span>
                </button>
              )}

              {/* Mobile menu button */}
              <button
                onClick={() => setIsMenuOpen(!isMenuOpen)}
                className={`md:hidden p-2 rounded-lg ${
                  state.isDarkMode ? 'text-white hover:bg-gray-800' : 'text-gray-900 hover:bg-gray-100'
                }`}
              >
                {isMenuOpen ? <X className="w-5 h-5" /> : <Menu className="w-5 h-5" />}
              </button>
            </div>
          </div>

          {/* Mobile Navigation */}
          {isMenuOpen && (
            <div className={`md:hidden py-4 border-t ${
              state.isDarkMode ? 'border-gray-700' : 'border-gray-200'
            }`}>
              <nav className="flex flex-col space-y-3">
                <Link
                  to="/"
                  onClick={() => setIsMenuOpen(false)}
                  className={`px-2 py-1 transition-colors duration-200 ${
                    location.pathname === '/' 
                      ? (state.isDarkMode ? 'text-green-400' : 'text-green-600')
                      : (state.isDarkMode ? 'text-gray-300' : 'text-gray-600')
                  }`}
                >
                  Home
                </Link>
                <Link
                  to="/listings"
                  onClick={() => setIsMenuOpen(false)}
                  className={`px-2 py-1 transition-colors duration-200 ${
                    location.pathname === '/listings' 
                      ? (state.isDarkMode ? 'text-green-400' : 'text-green-600')
                      : (state.isDarkMode ? 'text-gray-300' : 'text-gray-600')
                  }`}
                >
                  Browse Listings
                </Link>
                
                {state.user && state.user.role === 'seller' && (
                  <Link
                    to="/seller-dashboard"
                    onClick={() => setIsMenuOpen(false)}
                    className={`px-2 py-1 transition-colors duration-200 ${
                      location.pathname === '/seller-dashboard'
                        ? (state.isDarkMode ? 'text-green-400' : 'text-green-600')
                        : (state.isDarkMode ? 'text-gray-300' : 'text-gray-600')
                    }`}
                  >
                    Seller Dashboard
                  </Link>
                )}

                {state.user && state.user.role === 'admin' && (
                  <Link
                    to="/admin"
                    onClick={() => setIsMenuOpen(false)}
                    className={`px-2 py-1 transition-colors duration-200 ${
                      location.pathname === '/admin'
                        ? (state.isDarkMode ? 'text-green-400' : 'text-green-600')
                        : (state.isDarkMode ? 'text-gray-300' : 'text-gray-600')
                    }`}
                  >
                    Admin Dashboard
                  </Link>
                )}
              </nav>
            </div>
          )}
        </div>
      </header>

      {/* Shopping Cart Modal */}
      <ShoppingCartComponent isOpen={isCartOpen} onClose={() => setIsCartOpen(false)} />
    </>
  );
};

export default Header;